$var wire 1 ! I_we $end
$var wire 16 " I_data $end
$var wire 16 # O_data $end
$var wire 16 $ mem_data_0 $end
$var wire 16 % mem_data_1 $end
$var wire 16 & mem_data_2 $end
$var wire 16 ' mem_data_3 $end
$var wire 16 ( mem_data_4 $end
$var wire 16 ) mem_data_5 $end
$var wire 16 * mem_data_6 $end
$var wire 16 + mem_data_7 $end
$var wire 16 , mem_data_8 $end
$var wire 16 - mem_data_9 $end
$var wire 16 . mem_data_10 $end
$var wire 16 / mem_data_11 $end
$var wire 16 0 mem_data_12 $end
$var wire 16 1 mem_data_13 $end
$var wire 16 2 mem_data_14 $end
$var wire 16 3 mem_data_15 $end
$var wire 16 4 mem_data_16 $end
$var wire 16 5 mem_data_17 $end
$var wire 16 6 mem_data_18 $end
$var wire 16 7 mem_data_19 $end
$var wire 16 8 mem_data_20 $end
$var wire 16 9 mem_data_21 $end
$var wire 16 : mem_data_22 $end
$var wire 16 ; mem_data_23 $end
$var wire 16 < mem_data_24 $end
$var wire 16 = mem_data_25 $end
$var wire 16 > mem_data_26 $end
$var wire 16 ? mem_data_27 $end
$var wire 16 @ mem_data_28 $end
$var wire 16 A mem_data_29 $end
$var wire 16 B mem_data_30 $end
$var wire 16 C mem_data_31 $end
$var wire 1 D sys_clk $end
$var wire 16 E I_addr $end
$dumpvars
$end
#0
0!
b0000000000000000 "
b0000000000000000 #
b0000000000000000 $
b0000000000000001 %
b0000000000000010 &
b0000000000000011 '
b0000000000000100 (
b0000000000000101 )
b0000000000000110 *
b0000000000000111 +
b0000000000001000 ,
b0000000000001001 -
b0000000000001010 .
b0000000000001011 /
b0000000000001100 0
b0000000000001101 1
b0000000000001110 2
b0000000000001111 3
b0000000000010000 4
b0000000000010001 5
b0000000000010010 6
b0000000000010011 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
b0000000000000000 B
b0000000000000000 C
0D
#5
b0000000000110000 "
1D
b0000000000000001 E
1!
#10
0D
#15
b0000000000001010 E
1D
b0000000000110000 %
b0000000001010010 "
#20
0D
#25
1D
b0000000000001000 E
b0000000000111111 "
b0000000001010010 .
#30
0D
#35
b0000000000111111 ,
1D
b0000000000001101 E
b0000000000001101 "
#40
0D
#45
b0000000000011101 E
1D
b0000000001000000 "
#50
0D
#55
b0000000000001010 E
1D
b0000000001000000 A
b0000000001010010 "
#60
0D
#65
1D
b0000000000011111 E
b0000000000111100 "
#70
0D
#75
b0000000000111100 C
1D
b0000000000011000 E
b0000000001011010 "
#80
0D
#85
b0000000001011010 <
b0000000001100010 "
1D
b0000000000000001 E
0!
#90
0D
#95
b0000000000110000 #
1D
b0000000000010110 E
b0000000000110100 "
#100
0D
#105
b0000000000000000 #
1D
b0000000000000100 E
b0000000001000010 "
#110
0D
#115
b0000000000000100 #
1D
b0000000000001010 E
b0000000000100101 "
#120
0D
#125
b0000000001010010 #
1D
b0000000000010001 E
b0000000001000110 "
#130
0D
#135
b0000000000010001 #
1D
b0000000000000111 E
b0000000000111100 "
#140
0D
#145
b0000000000000111 #
1D
b0000000000000100 E
b0000000000111101 "
#150
0D
#155
b0000000000000100 #
1D
b0000000000010000 E
b0000000001100000 "
#160
0D
#165
b0000000000010000 #
1D
0!
b0000000000000000 "
b0000000000000000 #
b0000000000000000 $
b0000000000000001 %
b0000000000000010 &
b0000000000000011 '
b0000000000000100 (
b0000000000000101 )
b0000000000000110 *
b0000000000000111 +
b0000000000001000 ,
b0000000000001001 -
b0000000000001010 .
b0000000000001011 /
b0000000000001100 0
b0000000000001101 1
b0000000000001110 2
b0000000000001111 3
b0000000000010000 4
b0000000000010001 5
b0000000000010010 6
b0000000000010011 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
b0000000000000000 B
b0000000000000000 C
0D
b0000000000000000 E
